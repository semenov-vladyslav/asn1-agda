module btls-certs where

open import Data.Word8 using (Word8) renaming (primWord8fromNat to toùïé)
open import Data.ByteString using (ByteString; Strict; Lazy; pack)
open import Data.ByteString.Primitive using (‚à£List‚à£‚â°‚à£Strict‚à£)
open import Data.ByteVec using (ByteVec)
open import Data.Nat using (‚Ñï; zero; suc; _<_; z‚â§n; s‚â§s; _‚â§?_; _‚à∏_)
open import Data.Nat.DivMod using (_divMod_; result)
open import Data.Fin using (Fin; to‚Ñï)
open import Data.Vec using (Vec; toList; tabulate)
open import Data.List using (List; []; _‚à∑_; length; _++_; take)
open import Data.Product using (Œ£; _,_; proj‚ÇÅ)
open import Relation.Nullary using (Dec; yes; no)
open import Relation.Binary.PropositionalEquality using (_‚â°_; refl; sym; trans)
import Data.ByteString.IO as BSIO
open import IO
open import Function using (_‚àò_)

open import ASN1.Util using (base256)
import ASN1.BER as BER
import ASN1.X509

open import Bee2.Crypto.Belt using (beltHash)
open import Bee2.Crypto.Bign using (Pri; Pub; Sig; bignCalcPubkey; bignSign2)

b : ‚Ñï ‚Üí List Word8
b n = toList (tabulate {n} (toùïé ‚àò to‚Ñï))

b256 = b 256

x : (len : ‚Ñï) ‚Üí ‚Ñï ‚Üí Œ£ (List Word8) (Œª l ‚Üí len ‚â° length l)
x zero n = [] , refl
x (suc len) n with n divMod 256
... | result q r _ with x len q
... | ns , refl = (toùïé (to‚Ñï r) ‚à∑ ns) , refl

mkPri : ‚Ñï ‚Üí Pri
mkPri n with x 32 n
... | (ns , prf) = (pack ns) , sym (trans (‚à£List‚à£‚â°‚à£Strict‚à£ ns (p prf 32<2¬≥¬π)) (sym prf)) where
  p : ‚àÄ {u v k} ‚Üí (u‚â°v : u ‚â° v) ‚Üí u < k ‚Üí v < k
  p refl u<k = u<k
  32<2¬≥¬π : 32 < _
  32<2¬≥¬π =
    s‚â§s (s‚â§s (s‚â§s (s‚â§s (s‚â§s (s‚â§s (s‚â§s (s‚â§s (
    s‚â§s (s‚â§s (s‚â§s (s‚â§s (s‚â§s (s‚â§s (s‚â§s (s‚â§s (
    s‚â§s (s‚â§s (s‚â§s (s‚â§s (s‚â§s (s‚â§s (s‚â§s (s‚â§s (
    s‚â§s (s‚â§s (s‚â§s (s‚â§s (s‚â§s (s‚â§s (s‚â§s (s‚â§s (
    s‚â§s z‚â§n))))))))))))))))))))))))))))))))

ca-pri : Pri
ca-pri = mkPri 17

ca-pub : Pub
ca-pub = bignCalcPubkey ca-pri

sign : Pri ‚Üí ByteString Strict ‚Üí ByteString Strict
sign pri = proj‚ÇÅ ‚àò bignSign2 pri ‚àò beltHash

ca-cert : ByteString Lazy
ca-cert = BER.encode‚Ä≤ cert where
  open ASN1.X509.mkCert "issuer" "subject" "20170101000000Z" "20190101000000Z" (proj‚ÇÅ ca-pub) (sign ca-pri)

main = run (BSIO.writeBinaryFile "ca.pkc" ca-cert)
